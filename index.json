[{"authors":["admin"],"categories":null,"content":"I am a third year Ph.D. student in the Division of Applied Mathematics at Brown University. My research interests include scientific computing and numerical analysis of high-order methods for PDEs, especially as they pertain to problems in computational fluid dynamics. Presently, I am researching the use of deep neural networks to solve PDEs with my advisor, Professor Mark Ainsworth. I am a recipient of the NSF Graduate Research Fellowship.\nI am interested in increasing the participation of historically underrepresented groups in higher mathematics. Currently, I organize both the APMA Directed Reading Program and Mentoring Program.\n","date":1558137600,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1558742400,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"I am a third year Ph.D. student in the Division of Applied Mathematics at Brown University. My research interests include scientific computing and numerical analysis of high-order methods for PDEs, especially as they pertain to problems in computational fluid dynamics. Presently, I am researching the use of deep neural networks to solve PDEs with my advisor, Professor Mark Ainsworth. I am a recipient of the NSF Graduate Research Fellowship.\nI am interested in increasing the participation of historically underrepresented groups in higher mathematics.","tags":null,"title":"","type":"authors"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using Academic\u0026rsquo;s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further talk details can easily be added to this page using Markdown and $\\rm \\LaTeX$ math code.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"96344c08df50a1b693cc40432115cbe3","permalink":"/talk/example/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/example/","section":"talk","summary":"An example talk using Academic's Markdown slides feature.","tags":[],"title":"Example Talk","type":"talk"},{"authors":["admin"],"categories":[],"content":" 1. Overview The APMA Undergraduate/Graduate Mentorship Program was founded by Amanda Howard (APMA Ph.D. \u0026lsquo;18) and Steph Dodson (APMA Ph.D. \u0026lsquo;19) in the Fall of 2016. The program was started to provide a bridge between graduate and undergraduate students, especially for those looking for additional support in APMA. It can naturally be difficult for undergraduate and graduate students to connect, and graduate students may offer different perspectives than faculty advisors.\nEach undergraduate is paired with a graduate student mentor based on their interests and future goals. Some common topics that undergraduates discuss with their mentors are (1) course selection (2) preparing for research with faculty (3) preparing for graduate school (4) applying to internships and jobs. Additionally, we are particularly interested in addressing issues that arise when students feel isolated and/or underrepresented in the APMA community.\nThis document is meant to serve as a resource for graduate student mentors and covers the basics of the APMA undergraduate curriculum, undergraduate research at Brown, and other aspects of undergraduate life that new mentors might not be familiar with.\n2. The APMA Undergraduate Curriculum Undergraduates concentrating in APMA have a variety of specialization tracks available to them which culminate in either a Bachelor of Arts (A.B.) degree or a Bachelor of Science (Sc.B.) degree. The specializations are as follows:\n Applied Mathematics (A.B. or Sc.B.): this is the standard applied mathematics concentration. Applied Mathematics-Biology (Sc.B.): this is a joint concentration with the Division of Biology and Medicine. Applied Mathematics-Computer Science (Sc.B.): this is a joint concentration with the Department of Computer Science. Applied Mathematics-Economics (A.B.): this is a joint concentration with the Department of Economics.  Students generally discuss course selection with the academic advisors and more informally with their peers. However, it is a good idea for mentors to be familiar with the course offerings within the department as well, so it may be helpful to review the above links. Some general concerns:\n Unlike graduate students who typically take required courses with whichever professor is teaching the course at the time, undergraduates care immensely about who the course instructor is, so much so that they may delay taking a required course for multiple semesters until a professor they prefer is teaching it. Mentees may have questions for you about the quality of a particular instructor\u0026rsquo;s lectures, perceived difficulty, etc. You may be able to offer advice based on your own experiences with particular professors, although this type of knowledge is something you will pick up the longer you spend in the department.\n The course requirements for each specialization are \u0026ldquo;flexible\u0026rdquo; in the sense that as long as their academic advisor and the director of undergraduate studies sign off on it, they may substitute alternative courses for the required ones.\n Some students may be considering applying to graduate school. For those applying to Ph.D. programs or masters programs in pure math, it is important to have taken a standard course in real analysis (MATH 1010, which is offered every spring and not required for any of the APMA specialization tracks). The only analysis course taught in the Applied Math Department is the graduate analysis sequence (APMA 2110 \u0026amp; 2120). A number of undergraduate students take this sequence in their junior or senior years if they are intending to apply to Ph.D. programs.\n  Lastly,\n","date":1558137600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1558137600,"objectID":"af7070e59547ceb96690390f60ef5390","permalink":"/post/mentoring/","publishdate":"2019-05-18T00:00:00Z","relpermalink":"/post/mentoring/","section":"post","summary":"Some tips for new mentors in the APMA Undergrad/Grad Mentorship program.","tags":["Numerical PDE","Finite Volume Method","Conservation Laws"],"title":"APMA Mentoring Program -- Guidelines for Mentors","type":"post"},{"authors":["admin"],"categories":[],"content":" 1. High Order Finite Volume Methods Last time, we established that the explicit first order finite volume scheme is given by $$ \\begin{equation} \\bar{u}_{j}^{n+1} = \\bar{u}_{j}^{n} - \\frac{\\Delta t}{\\Delta x}\\left( \\hat{f}(\\bar{u}_{j}^{n}, \\bar{u}_{j+1}^{n}) - \\hat{f}(\\bar{u}_{j-1}^{n}, \\bar{u}_{j}^{n}) \\right), \\label{eq:finitevol2} \\end{equation} $$ where $\\bar{u}_{j}^{n}$ denotes the cell averages at time $t^{n}$ and $\\bar{u}_{j}^{n+1}$ the cell averages at time $t^{n+1} = t^{n} + \\Delta t$. Here, $\\hat{f}$ is the numerical flux function which takes as inputs cell averages and returns an approximation of the flux function at the cell endpoints $x_{j+1/ 2}$, i.e. $f(u_{j+1/ 2}) \\approx \\hat{f}(\\bar{u}_{j}, \\bar{u}_{j+1})$ and $f(u_{j-1/ 2}) \\approx \\hat{f}(\\bar{u}_{j-1}, \\bar{u}_{j})$.\nMore generally, we can view the quantity $\\bar{u}_{j}$ as a first order (zero degree polynomial) reconstruction of $u(x)$ in cell $I_{j}$ using the cell average. The same can be said of $\\bar{u}_{j+1}$ in cell $I_{j+1}$. By approximating $u(x_{j+1/ 2}^{-}) = u_{j+1/ 2}^{-} \\approx \\bar{u}_{j}$ on the left \u0026ldquo;side\u0026rdquo; of $x_{j+1/ 2}$ and $u(x_{j+1/ 2}^{+}) = u_{j+1/ 2}^{+} \\approx \\bar{u}_{j+1}$ on the right side of $x_{j+1/ 2}$, the numerical flux has a natural interpretation as $f(u_{j+1/ 2}) \\approx \\hat{f}(u_{j+1/ 2}^{-}, u_{j+1/ 2}^{+})$. We reconcile the two reconstructions at $x_{j+1/ 2}$ by utilizing the numerical flux function. Figure 1 illustrates this concept.\n  Figure 1: First order reconstruction. We reconstruct $u$ using a zero degree polynomial (i.e. constant functions) in each cell.   1.1 Polynomial Reconstruction Viewing the finite volume scheme as a reconstruction procedure using the cell averages is key to developing higher order methods. Using $\\eqref{eq:finitevol2}$, we have $u_{j+1/ 2}^{-} = \\bar{u}_{j} + \\mathcal{O}(\\Delta x)$. Suppose we want to develop a third-order finite volume scheme now. In particular, we would like to have $$ u_{j+1/ 2}^{-} = \\mathcal{F}(\\bar{u}_{j-p}, \\dots, \\bar{u}_{j+q}) + \\mathcal{O}(\\Delta x^{3}), $$\nwhere $p$ and $q$ are integers to be chosen by us. It stands to reason that if we want a third-order reconstruction of $u(x)$ in cell $I_{j}$, we need to use three \u0026ldquo;pieces\u0026rdquo; of information: $u_{j+1/ 2}^{-} \\approx \\mathcal{F}(\\bar{u}_{j-1}, \\bar{u}_{j}, \\bar{u}_{j+1})$. In other words, we are seeking a degree two polynomial $p_{j}(x) = ax^{2} + bx + c$ in $I_{j}$ such that $u_{j+1/ 2}^{-} = p_{j}(x_{j+1/ 2}) + \\mathcal{O}(\\Delta x^{3})$. In order to fully determine this polynomial, i.e. solve for $a,b,c$, we require three equations. A natural condition to impose on $p_{j}$ is that it preserves cell averages over the stencil $\\{I_{j-1}, I_{j}, I_{j+1}\\}$: $$ \\begin{equation} \\frac{1}{\\Delta x} \\int_{I_{i}} p_{j}(x)\\;dx = \\bar{u}_{i}, \\;\\;\\;i \\in \\{j-1,j,j+1\\}. \\end{equation} $$\nWe then take $u_{j+1/ 2}^{-} = p_{j}(x_{j+1/ 2})$. Similarly, we take $u_{j+1/ 2}^{+} = p_{j+1}(x_{j+1/ 2})$. Figure 2 demonstrates how the third-order reconstruction procedure works.\n  Figure 2: Third order reconstruction. We reconstruct $u$ using a quadratic function defined in the stencil $\\{I_{j-1}, I_{j}, I_{j+1}\\}$ and enforce that the quadratic function maintains cell averages across the stencil. We take $u_{j+1/ 2}^{-} \\approx p_{j}(x_{j+1 /2})$ and $u_{j+1/ 2}^{+} \\approx p_{j+1}(x_{j+1/ 2})$ (not pictured here).   Definition 1. The order $k$ in space finite volume scheme is given by $$ \\begin{equation} \\frac{d\\bar{u}_{j}}{dt} + \\frac{1}{\\Delta x}\\left( \\hat{f}(u_{j+1/ 2}^{-}, u_{j+1/ 2}^{+}) - \\hat{f}(u_{j-1/ 2}^{-}, u_{j-1/ 2}^{+}) \\right) = 0 \\label{eq:finitevolk} \\end{equation} $$ where $u_{j+1/ 2}^{-} \\approx p_{j}(x_{j+1/ 2})$ and $u_{j+1/ 2}^{+} \\approx p_{j+1}(x_{j+1/ 2})$. The degree $k-1$ polynomial $p_{j}$ is reconstructed from the stencil $\\{\\bar{u}_{j-p}, \\dots, \\bar{u}_{j+q}\\}$ and satifies the $q+p+1$ conditions $$ \\frac{1}{\\Delta x} \\int_{I_{i}} p_{j}(x)\\;dx = \\bar{u}_{i}, \\;\\;\\;i \\in \\{j-p, \\dots, j+q\\}. $$\nFor concreteness, we will work with the third-order scheme. It is a straightforward (if tedious) pen and paper exercise to compute the parameters $a,b,c$ for the polynomial $p_{j}(x) = ax^{2}+bx+c$. However, notice that the scheme $\\eqref{eq:finitevolk}$ only requires the evaluation of the polynomials at the endpoints of the cells. For the third order scheme, this amounts to the following formulae: $$ \\begin{align} u_{j+1/ 2}^{-} \u0026amp;= p_{j}(x_{j+1/ 2}) = -\\frac{1}{6}\\bar{u}_{j-1} + \\frac{5}{6}\\bar{u}_{j} + \\frac{1}{3}\\bar{u}_{j+1}\\label{eq:recon1}\\\\\nu_{j+1/ 2}^{+} \u0026amp;= p_{j+1}(x_{j+1/ 2}) = \\frac{1}{3}\\bar{u}_{j} + \\frac{5}{6}\\bar{u}_{j+1} - \\frac{1}{6}\\bar{u}_{j+2}.\\label{eq:recon2} \\end{align} $$\nThese formulae can be found in a number of references, e.g. Chapter 4 of [3].\nBefore moving on, we should make note of two very important issues here. The first is that $\\eqref{eq:finitevolk}$ is only a semidiscrete scheme \u0026ndash; we haven\u0026rsquo;t discretized time yet! Recall that for the first order scheme we used an explicit first-order time discretization. But if we use this time discretization here, then we\u0026rsquo;ll be pairing a third-order in space discretization with a first-order in time discretization. Should we expect such a scheme to be stable? Furthermore, we\u0026rsquo;ll have to reduce our time step commensurately to ensure that the error in the time discretization does not dominate.\nSecond, we haven\u0026rsquo;t said anything about the convergence properties (or any other properties for that matter) of the higher order finite volume schemes. Recall that the Lax-Wendroff flux resulted in a second-order scheme which was neither monotone nor total variation diminishing (TVD). It\u0026rsquo;s unclear what will happen when we apply $\\eqref{eq:finitevolk}$ to actually solve a conservation law.\n1.2 Third Order Runge-Kutta Time Integration In all of the examples that follow, we will use a third order Runge-Kutta (RK3) discretization in time. For our purposes, this discretization is conditionally stable with some necessary restriction on the time step as with all explicit schemes. If we pair the RK3 discretization with a spatial discretization higher than third order accuracy, we may have to decrease the time step further.\nThe setting for the RK3 discretization is as follows: consider the semidiscrete scheme $$ \\frac{d\\bar{u}_{j}}{dt} + \\mathcal{L}(\\bar{u}_{j}) = 0, $$\nwhere $\\mathcal{L}$ is the spatial operator associated with the flux terms.\nDefinition 2. The third order Runge-Kutta time discretization is given by $$ \\begin{align} \\bar{u}_{j}^{(1)} \u0026amp;= \\bar{u}_{j}^{n} - \\Delta t \\mathcal{L}(\\bar{u}_{j-p}^{n}, \\dots, \\bar{u}_{j+q}^{n}, t^{n})\\notag\\\\\n\\bar{u}_{j}^{(2)} \u0026amp;= \\frac{3}{4}\\bar{u}_{j}^{n} + \\frac{1}{4}\\left( \\bar{u}_{j}^{(1)} - \\Delta t \\mathcal{L}(\\bar{u}_{j-p}^{(1)}, \\dots, \\bar{u}_{j+q}^{(1)}, t^{n} + \\Delta t) \\right)\\notag\\\\\n\\bar{u}_{j}^{n+1} \u0026amp;= \\frac{1}{3}\\bar{u}_{j}^{n} + \\frac{2}{3}\\left( \\bar{u}_{j}^{(2)} - \\Delta t \\mathcal{L}(\\bar{u}_{j-p}^{(2)}, \\dots, \\bar{u}_{j+q}^{(2)}, t^{n} + \\frac{1}{2}\\Delta t) \\right).\\notag \\end{align} $$\nThe choice of coefficients in the above scheme is deliberate. In fact, with these coefficients, the RK3 time discretization can be shown to be TVD.\nProposition 1. The third order Runge-Kutta time discretization is TVD when paired with a spatial scheme that is also TVD.\nInterestingly, there are many examples of time discretizations which are not TVD, even when paired with a TVD spatial scheme. We refer the reader to the seminal work of Sigal Gottlieb and Chi-Wang Shu in [1] for a much more in-depth discussion of TVD Runge-Kutta schemes.\n1.3 A First Attempt at Implementation Before covering the theory of higher order spatial discretizations, it is highly illustrative to attempt a first implementation of the third order finite volume scheme with RK3 time discretization. All of the source code can be found on GitHub. There are actually relatively few changes that must be made to the first order code. The main time-stepping loop is as follows:\nt = 0.0 while t \u0026lt; T: # alpha for the Lax-Friedrichs flux A = np.amax(np.amax(u0)) # first RK stage um,up = polynomial_reconstruction(u0) fR = lf_flux(um,up,A) fL = np.roll(fR,1) u = u0 - dt/dx*(fR - fL) # second RK stage um,up = polynomial_reconstruction(u) fR = lf_flux(um,up,A) fL = np.roll(fR,1) u = 3.0/4.0*u0 + 1.0/4.0*(u - dt/dx*(fR - fL)) # third RK stage um,up = polynomial_reconstruction(u) fR = lf_flux(um,up,A) fL = np.roll(fR,1) u = 1.0/3.0*u0 + 2.0/3.0*(u - dt/dx*(fR - fL)) # increment time step u0 = u t = t+dt  Aside from having the three stages for the Runge-Kutta time-stepping, the only real addition to the code is the polynomial reconstruction using the cell averages. Using $\\eqref{eq:recon1}$ and $\\eqref{eq:recon2}$, the polynomial reconstruction is easily implemented with the following lines:\ndef polynomial_reconstruction(u): # compute u_{j+1/2}^{-} and u_{j+1/2}^{+} um = -1.0/6.0*np.roll(u,1) + 5.0/6.0*u + 1.0/3.0*np.roll(u,-1) up = 1.0/3.0*u + 5.0/6.0*np.roll(u,-1) - 1.0/6.0*np.roll(u,-2) return um, up  Figure 3 shows a complete simulation of Burgers equation up to $T=2$ using this scheme.\n  Figure 3: The third order finite volume scheme applied to Burgers equation.   Yikes. On first glance, it appears our scheme performs reasonably well before the appearance of the shock but develops spurious oscillations after the shock. We can also compute the errors in the $\\ell^{1}$ norm: $$ ||\\bar{u} - \\bar{u}_{e}||_{\\ell^{1}} = \\frac{1}{N} \\sum_{j=1}^{N} |\\bar{u}_{j} - \\bar{u}_{e,j}|. $$\nFigure 4 describes how the $\\ell^{1}$ error decreases as we increase the number of grid points. Before the appearance of the shock, our scheme displays third order accuracy as expected. But after the appearance of the shock, the accuracy is reduced to first order.\n  Figure 4: Errors in the $\\ell^{1}$ norm of the third order finite volume scheme before and after the formation of the shock in Burgers equation.   So, what on earth is going on here? The driving idea behind higher order schemes is that we hope to converge to the exact (entropy) solution faster than the original first order scheme. In the presence of shocks and discontinuities, though, it seems as if our third-order scheme hasn\u0026rsquo;t given us any benefits. Indeed, it actually introduces oscillations, which is arguably worse than the first order scheme which we recall was provably monotone and TVD.\n2. Godunov\u0026rsquo;s Theorem Our initial results are actually not altogether unexpected and are actually a result of Godunov\u0026rsquo;s Theorem.\nDefinition 3. A linear scheme is one that can be written in the form $$ \\bar{u}_{j}^{n+1} = \\sum_{\\ell=-k}^{k} c_{\\ell}(\\lambda) \\bar{u}_{j+\\ell}^{n}, \\;\\;\\;\\lambda = \\frac{\\Delta t}{\\Delta x} $$ when applied to a linear conservation law.\nIt\u0026rsquo;s worth noting that all of the finite volume schemes we have considered thus far are linear schemes (a fact which can easily be verified with pen and paper).\nTheorem 1. (Godunov) A linear scheme is monotone if and only if it is total variation diminishing (TVD). Moreover, linear TVD schemes are at most first-order accurate.\nThere\u0026rsquo;s quite a bit to digest here, but we\u0026rsquo;ll start with the first statement. Recall from last time that monotone schemes converge to the entropy solution and are also TVD. Godunov\u0026rsquo;s Theorem states that for linear schemes, the notion of being monotone is equivalent to being TVD. The second statement is much deeper: it tells us that if we want to construct a linear monotone scheme, then it must be first-order accurate. In particular, we posit that the third-order finite volume scheme is neither monotone nor TVD.\nIn fact, monotone schemes are at most first-order accurate regardless of whether the scheme is linear or not. This suggests that we simply can\u0026rsquo;t develop high order monotone schemes. However, having only a TVD scheme is still desirable as it essentially guarantees our scheme will not generate spurious oscillations. And yet, Godunov\u0026rsquo;s Theorem tells us that if we stick to linear schemes, we can\u0026rsquo;t develop high order TVD schemes either.\nNevertheless, it is still possible to enforce the TVD property on the third-order finite volume scheme. To do so, we employ a post-processing step known as slope limiting. This results in a nonlinear TVD scheme which is does not produce spurious oscillations.\n3. Slope Limiting 3.1 Generalized MUSCL Limiter The key observation is that when nonphysical oscillations appear in the numerical solution, the gradients of the cell averages between successive cells rapidly change sign. Slope limiting procedures identify where these sign changes occur and reduce the gradient to zero in these regions. The procedure is as follows.\n Given $\\{u_{j+1/ 2}^{\\pm}\\}$ and the cell averages $\\{\\bar{u}_{j}\\}$, define $$ \\begin{align} \\tilde{u}_{j} = u_{j+1/ 2}^{-} - \\bar{u}_{j}, \\;\\;\\;\\;\\;\\tilde{\\tilde{u}}_{j} = \\bar{u}_{j} - u_{j-1/ 2}^{+}. \\end{align} $$\n Compute the modified quantities $\\tilde{u}_{j}^{\\text{mod}}$ and $\\tilde{\\tilde{u}}_{j}^{\\text{mod}}$ according to $$ \\begin{align} \\tilde{u}_{j}^{\\text{mod}} \u0026amp;= \\text{minmod}\\{\\tilde{u}_{j}, \\bar{u}_{j+1} - \\bar{u}_{j}, \\bar{u}_{j} - \\bar{u}_{j-1}\\}\\\\\n\\tilde{\\tilde{u}}_{j}^{\\text{mod}} \u0026amp;= \\text{minmod}\\{\\tilde{\\tilde{u}}_{j}, \\bar{u}_{j+1} - \\bar{u}_{j}, \\bar{u}_{j} - \\bar{u}_{j-1}\\}, \\end{align} $$ where the $\\text{minmod}$ function is defined as $$ \\begin{equation} \\text{minmod}(a_{1},\\dots,a_{n}) = \\begin{cases} s \\cdot \\min_{j} |a_{j}|, \u0026amp;s = \\text{sgn}(a_{1}) = \\dots = \\text{sgn}(a_{n})\\\\\n0, \u0026amp;\\text{else}. \\end{cases} \\end{equation} $$\n Compute the modified reconstructed values $u_{j+1/ 2}^{\\pm,\\text{mod}}$ according to $$ \\begin{align} u_{j+1/ 2}^{-,\\text{mod}} = \\bar{u}_{j} + \\tilde{u}_{j}^{\\text{mod}}, \\;\\;\\;\\;\\;u_{j-1/ 2}^{+,\\text{mod}} = \\bar{u}_{j} - \\tilde{\\tilde{u}}_{j}^{\\text{mod}}. \\end{align} $$\n  The procedure outlined above is known as the generalized MUSCL (monotone upwind scheme for conservation laws) limiter. Note that the quantities $\\bar{u}_{j+1} - \\bar{u}_{j}$ and $\\bar{u}_{j} - \\bar{u}_{j-1}$ are crude approximations to the gradient over stencil $\\{I_{j}, I_{j+1}\\}$ and $\\{I_{j-1}, I_{j}\\}$. In the case of oscillations in our numerical solution, these two quantities will have opposite signs, in which case the $\\text{minmod}$ function returns $0$ and the modified quantities $u_{j+1/ 2}^{\\pm,\\text{mod}}$ are set to the cell average. This is equivalent to the original first order finite volume scheme we studied last time! Hence, in the presence of shocks and discontinuities, we might expect the generalized MUSCL scheme to be first order accurate.\nNow, let\u0026rsquo;s consider the case when the $\\text{minmod}$ function returns the first argument. We carefully note that this situation occurs when $\\{\\bar{u}_{j}\\}$ is monotone over the stencils $\\{I_{j-1}, I_{j}, I_{j+1}\\}$. Then we have $u_{j+1/ 2}^{\\pm,\\text{mod}} = u_{j+1/ 2}^{\\pm}$ and the high order finite volume scheme is unchanged. Thus, in smooth, monotone regions the generalized MUSCL limiter maintains original high order accuracy of the scheme.\nLastly, we must consider what happens near smooth extrema. For instance, $u(x,0) = \\sin{x}$ has smooth extrema at $x=\\pi/2$ (maximum) and $x=3\\pi/2$ (minimum). As consecutive gradients have opposite sign at local extrema, the $\\text{minmod}$ function will return $0$ and the scheme is again reduced to first order. Stanley Osher proved the following result:\nTheorem 2. TVD schemes are at most first-order accurate near smooth extrema.\nThis seems like a problem since plenty of smooth solutions have smooth extrema. We\u0026rsquo;ll discuss shortly how to develop slope limiters which do not have this drawback, but first, it would be prudent to discuss to discuss the properties of the generalized MUSCL limiter. When paired with this limiter, the finite volume scheme is actually TVD. The proof is due to Ami Harten [2].\nLemma 1. (Harten) If a scheme can be written in the form $$ \\begin{equation} \\bar{u}_{j}^{n+1} = \\bar{u}_{j}^{n} + C_{j+1/ 2}(\\bar{u}_{j+1}^{n} - \\bar{u}_{j}^{n}) - D_{j-1/ 2}(\\bar{u}_{j}^{n} - \\bar{u}_{j-1}^{n}) \\end{equation} $$ where $C_{j+1/ 2}, D_{j+1/ 2} \\geqslant 0$ and $C_{j+1/ 2} + D_{j+1/ 2} \\leqslant 1$, then the scheme is TVD.\nHarten\u0026rsquo;s Lemma is the key to proving that the finite volume MUSCL scheme is TVD.\nProposition 1. The finite volume scheme with generalized MUSCL limiter is TVD.\nWithout further ado, we present the results using the MUSCL limiter. The only change from the previous third-order code is to add the MUSCL limiter:\ndef muscl_limiter(um, up, u): # gradients to be adjusted ut = um - u utt = u - np.roll(up,1) ut_m = minmod(ut, np.roll(u,-1)-u, u-np.roll(u,1)) utt_m = minmod(utt, np.roll(u,-1)-u, u-np.roll(u,1)) # modify the cell reconstructions using ut and utt um_mod = u + ut_m up_mod = u - utt_m up_mod = np.roll(up_mod,-1) return um_mod, up_mod  The $\\text{minmod}$ function is easily implemented as follows:\ndef minmod(a, b, c): # check whether a, b, and c are the same sign signs = ((np.sign(a)==np.sign(b)) \u0026amp; (np.sign(b)==np.sign(c)) \u0026amp; (np.sign(c)==np.sign(a))) # compute minimum magnitudes of {a,b,c} vals = np.concatenate((a,b,c), axis=1) mins = np.amin(np.abs(vals), axis=1) # compute the minmod m = signs*np.sign(a)*np.reshape(mins,(len(vals),1)) return m  Figure 5 contains the results. Voila! At first glance, all appears to be well. The nonphysical oscillations have been removed entirely from our numerical solution.\n  Figure 5: The third order finite volume scheme with generalized MUSCL limiter applied to Burgers equation.   The next step is to verify that we are indeed getting the expected rates of convergence. There are three scenarios to consider: (i) the solution is smooth everywhere (we\u0026rsquo;ll consider the case when $T=0.3$) (ii) the solution develops a shock and we compute the $\\ell^{1}$ error over the entire computational grid (we\u0026rsquo;ll consider the case $T=1.5$ here) (iii) the solution develops a shock and we compute the $\\ell^{1}$ error excluding a small region around the shock.\nIn the first scenario, we expect a reduced rate of convergence due to the presence of smooth extrema in the solution. In the second scenario, the order of convergence should be reduced to first order. Finally, in the third scenario, the solution is actually piecewise monotone and so we might expect to maintain the original third order accuracy if compute errors away from the shock.\nIndeed, Figure 6 shows these three scenarios exactly. Before the shock, the overall order of accuracy is somewhere between 2 and 3; at the two extrema, the order is reduced to 1 but everywhere else, it is close to 3, leading to a suboptimal order of accuracy. After the shock, the order of accuracy is 1 overall, but when considering only cells at a distance 0.5 away from the shock at $x=\\pi$, the order of accuracy is 3.\nThis isn\u0026rsquo;t such a bad place to be, then. Near shocks, the mathematical theory tells us that we can never do better than first order accuracy, but we\u0026rsquo;ve managed to construct a scheme which is TVD and capable of giving higher order accuracy everywhere the solution is smooth. In the end, this is all we can really ask for. In the remaining posts, we will consider the different types of high order schemes which can be used to numerically solve nonlinear conservation laws.\n  Figure 6: Error in the $\\ell^{1}$ norm of the third order finite volume MUSCL scheme before the shock (blue line with squares), after the shock over the entire domain (red line with circles), and after the shock but excluding a small region around $x=\\pi$ (red line with x\u0026rsquo;s).   3.2 Total-Variation Bounded (TVB) Limiter But first, we consider how to remedy the issue of suboptimal convergence near smooth extrema. Recall that the issue here is that consecutive gradients have different signs and the $\\text{minmod}$ function return zero. In fact, recall that Theorem 2 tells us we can have at most first order accuracy near smooth extrema. If we relax the TVD constraint even further, it is possible to obtain uniformly high-order accurate schemes near smooth extrema.\nDefinition 4. If $TV(\\bar{u}^{n}) \\leqslant B$ for some fixed $B\u0026gt;0$ depending only on $TV(\\bar{u}^{0})$ and $n$ and $\\Delta t$ such that $n\\Delta t \u0026lt; T$, then the scheme is said to be total variation bounded (TVB) in $0 \\leqslant t \\leqslant T$.\nIt is clear that all TVD schemes are TVB. For TVB schemes, one can show that there exists a subsequence in $L^{1}_{\\text{loc}}$ that converges to a weak solution of the conservation law.\nIn order to turn to generalized MUSCL limiter into a scheme that is TVB, we need only make a small adjustment. Namely, we define $$ \\begin{align} \\tilde{u}_{j}^{\\text{mod}} \u0026amp;= \\overline{\\text{minmod}}\\{\\tilde{u}_{j}, \\bar{u}_{j+1} - \\bar{u}_{j}, \\bar{u}_{j} - \\bar{u}_{j-1}\\}\\\\\n\\tilde{\\tilde{u}}_{j}^{\\text{mod}} \u0026amp;= \\overline{\\text{minmod}}\\{\\tilde{\\tilde{u}}_{j}, \\bar{u}_{j+1} - \\bar{u}_{j}, \\bar{u}_{j} - \\bar{u}_{j-1}\\}, \\end{align} $$\nwhere the modified minmod function $\\overline{\\text{minmod}}$ is defined by $$ \\begin{equation} \\overline{\\text{minmod}}(a_{1}, \\dots, a_{n}) = \\begin{cases} a_{1}, \u0026amp;|a_{1}| \\leqslant M\\Delta x^{2}\\\\\n\\text{minmod}(a_{1}, \\dots, a_{n}) \u0026amp;\\text{else}. \\end{cases} \\end{equation} $$\nHere, $M\u0026gt;0$ is a parameter to be chosen by us. Essentially, the TVB limiter first checks whether $u_{j+1/ 2}^{-}$ is sufficiently close to $\\bar{u}_{j}$. If so, then the modified $\\text{minmod}$ function returns the first argument even if consecutive gradients have different signs, thus ensuring that the scheme retains high-order accuracy around smooth extrema [4]. The implementation is quite straightforward:\ndef minmod2(a, b, c, dx, M): # check whether a, b, and c are the same sign signs = ((np.sign(a)==np.sign(b)) \u0026amp; (np.sign(b)==np.sign(c)) \u0026amp; (np.sign(c)==np.sign(a))) # compute minimum magnitudes of {a,b,c} vals = np.concatenate((a,b,c), axis=1) mins = np.amin(np.abs(vals), axis=1) # check whether first argument is sufficiently small a1 = (np.abs(a) \u0026lt;= M*dx**2) a2 = (np.abs(a) \u0026gt; M*dx**2) # compute the minmod m = a1*a + a2*signs*np.sign(a)*np.reshape(mins,(len(vals),1)) return m  We won\u0026rsquo;t show plots of the numerical solution here as they wouldn\u0026rsquo;t be discernible from the plots of the MUSCL limiter to the naked eye. Instead, Figure 7 shows the convergence rates for the TVB limiter. We note that before the shock forms, the order of accuracy is now 3 as expected, even in the presence of smooth extrema.\n  Figure 7: Error in the $\\ell^{1}$ norm of the third order finite volume TVB scheme before the shock (blue line with squares), after the shock over the entire domain (red line with circles), and after the shock but excluding a small region around $x=\\pi$ (red line with x\u0026rsquo;s).   4. Key Takeaways To summarize, we implemented a third order finite volume scheme for a one-dimensional scalar conservation law. Without any modifications, this scheme was not TVD and introduced new extrema in our numerical solution that were not seen in the first order finite volume scheme. We touched on Godunov\u0026rsquo;s Theorem, which describes the fundamental limits of accuracy of linear monotone schemes.\nWe were able to develop a TVD slope limiter to remove the spurious oscillations in our high order numerical solution but noted that the limiter degraded the order of accuracy of our scheme near smooth extrema. In fact, we learned that all TVD schemes are at most first order near smooth extrema. To develop a truly high order scheme in the presence of smooth extrema, we turned to the TVB limiter.\nIt is worth emphasizing once more than when we talk about \u0026ldquo;high order\u0026rdquo; schemes for nonlinear conservation laws, we generally mean that the scheme maintains high order accuracy in smooth regions, is first order accurate in the vicinity of shocks and discontinuities, and is total variation diminishing (does not introduce any new extrema/spurious oscillations). Next time, we will cover essentially non-oscillatory finite volume schemes which essentially remove spurious oscillations by performing the polynomial reconstruction step in a clever way rather than post-processing the reconstruction as with the slope limiters we have seen in this post.\nReferences [1] Gottlieb, Sigal, and Chi-Wang Shu. \u0026ldquo;Total variation diminishing Runge-Kutta schemes.\u0026rdquo; Mathematics of computation of the American Mathematical Society 67.221 (1998): 73-85.\n[2] Harten, Ami. \u0026ldquo;High resolution schemes for hyperbolic conservation laws.\u0026rdquo; Journal of computational physics 49.3 (1983): 357-393.\n[3] Johnson, B. Cockburn C., and C-W. Shu E. Tadmor. \u0026ldquo;Advanced numerical approximation of nonlinear hyperbolic equations.\u0026rdquo; (1997).\n[4] Shu, Chi-Wang. \u0026ldquo;TVB uniformly high-order schemes for conservation laws.\u0026rdquo; Mathematics of Computation 49.179 (1987): 105-121.\nCodes \u0026amp; Resources  NumCL repository on GitHub Figures 1 and 2 were created using Mathcha, an online math editor with a convenient GUI that even allows you to export figures to TikZ.  ","date":1558137600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1558137600,"objectID":"d8a0575757d87febb503bcec22f196ab","permalink":"/post/conservation-laws-2/","publishdate":"2019-05-18T00:00:00Z","relpermalink":"/post/conservation-laws-2/","section":"post","summary":"A look at higher order finite volume methods for conservation laws.","tags":["Numerical PDE","Finite Volume Method","Conservation Laws"],"title":"Numerical Methods for Conservation Laws (Part 2)","type":"post"},{"authors":["admin"],"categories":[],"content":" 1. Conservation Laws In this post, we\u0026rsquo;ll take a look at conservation laws, the contexts in which they arise in nature, and some of the numerical methods used for solving them. In one spatial-dimension, conservation laws take the general form $$ \\begin{equation} \\begin{cases} u_{t} + f(u)_{x} = 0 \u0026amp;\\text{in}\\;\\mathbb{R} \\times [0,\\infty)\\\\\nu(x,0) = u_{0}(x) \u0026amp;\\text{on}\\;\\mathbb{R} \\times \\{t=0\\}. \\end{cases} \\label{eq:conslaw} \\end{equation} $$\nHere, we consider the spatial domain to be the entire real line (thus, we have no boundary conditions). The function $f(u)$ \u0026ndash; typically called the flux function \u0026ndash; is sufficiently smooth. As their name suggests, conservation laws preserve mass. We often think of the quantity $u$ as the density of some fluid, in which case $\\int_{\\mathbb{R}} u(x,t)dx$ may be viewed as the mass of fluid. If we assume that $u$ is compactly supported in $x$ (i.e. it is nonzero outside of some compact set in $x$, a reasonable assumption as the fluid should have finite mass) and $f(0) = 0$, then taking derivatives over time yields $$ \\begin{align} \\frac{\\partial}{\\partial t} \\int_{-\\infty}^{\\infty} u(x,t)\\;dx \u0026amp;= \\int_{-\\infty}^{\\infty} \\frac{\\partial u}{\\partial t}\\;dx = -\\int_{-\\infty}^{\\infty} \\frac{\\partial f(u)}{\\partial x}\\;dx\\notag\\\\\n\u0026amp;= f(u(-\\infty)) - f(u(\\infty)) = 0.\\notag \\end{align} $$\nThe above computation implies that $\\int_{\\mathbb{R}} u(x,t)\\;dx = \\int_{\\mathbb{R}} u(x,0)\\;dx$: the mass of $u$ is conserved over time.\nTo gain some intuition for how solutions of this PDE might behave, we\u0026rsquo;ll first consider the simplest conservation law there is: the linear advection equation. Taking $f(u) = u$, it is evident that our solution is given by $u(x,t) = u_{0}(x-t)$. The PDE \u0026ldquo;transports\u0026rdquo; the initial profile in the $x$ direction. In particular, we note that the solution to the linear conservation law is exactly as smooth as our initial data. That is, if $u_{0} \\in C^{1}_{x}(\\mathbb{R})$ then $u \\in C_{x}^{1}(\\mathbb{R})$ as well. We haven\u0026rsquo;t said anything particularly illuminating thus far and indeed, the linear advection equation isn\u0026rsquo;t particularly interesting to begin with.\nNext, let\u0026rsquo;s consider a simple nonlinear conservation law: $$ \\begin{cases} u_{t} + uu_{x} = 0 \u0026amp;\\text{in}\\;\\mathbb{R} \\times [0,\\infty)\\\\\nu(x,0) = \\sin{x} \u0026amp;\\text{on}\\;\\mathbb{R} \\times \\{t=0\\}. \\end{cases} $$\nThe initial condition is as smooth as possible now: $\\sin{x} \\in C_{x}^{\\infty}(\\mathbb{R})$. But what can we say about $u(x,t)$? Should we still expect it to be smooth in $x$? It turns out that the answer is a resounding no. In fact, solutions to the above nonlinear PDE (known as Burgers equation) are not even $C_{x}^{0}(\\mathbb{R})$! The exact mathematical cause of this phenomena is due to the crossing of something called characteristic curves, but we will first consider a more intuitive explanation.\nWe may view Burgers equation as an advection equation in which the speed of propagation is equal to $u$ itself. Our initial sine profile thus moves with variable speed in $x$. For $0 \\leqslant x \\leqslant \\pi$, the sine wave is positive and the solution travels forward. For $\\pi \u0026lt; x \\leqslant 2\\pi$, the sine wave is negative and the solution travels backwards. The animation below shows how the solution of Burgers equation evolves over time, and we see the development of a genuine discontinuity at $x=\\pi$.   Figure 1: Solution of Burgers equation with sine initial data.  \nShocks such as the one above occur naturally in many settings, for instance high-speed compressible flows and aeroacoustics. However, a natural question we might ask next is how discontinuities and shocks fit with our notion of the classical solution of a PDE. For instance, the linear advection equation contains a first-order time derivative and a first-order spatial derivative. Naturally, we should require that $u \\in C_{x,t}^{1}(\\mathbb{R} \\times [0,\\infty))$ \u0026ndash; our solution should be once differentiable in space and time. Consider, though, the linear advection equation with $u(x,0) = 𝟙_{\\{x \\leqslant 0\\}}$. You\u0026rsquo;ll probably agree with me that the only possible solution to this problem is $u(x,t) = 𝟙_{\\{x \\leqslant t\\}}$, and yet this \u0026ldquo;solution\u0026rdquo; is not even continuous let alone differentiable. Before moving on to numerical solvers, we will spend some time developing alternative notions of PDE solutions that are capable of admitting discontinuities and shocks.\n1.2 Weak Solutions of Conservation Laws Definition 1. We call $u(x,t)$ a weak solution of the conservation law $\\eqref{eq:conslaw}$ if $$ \\begin{equation} \\int_{0}^{\\infty}\\int_{-\\infty}^{\\infty} u\\varphi_{t} + f(u)\\varphi_{x}\\;dxdt = -\\int_{-\\infty}^{\\infty} u(x,0)\\varphi(x,0)\\;dx \\label{eq:weaksol} \\end{equation} $$\nfor all $\\varphi \\in C_{c}^{\\infty}(\\mathbb{R} \\times \\mathbb{R})$.\nWe refer to $\\varphi$ as a test function. It is smooth in both space and time and compactly supported, i.e. $\\varphi$ is zero outside of some compact set in space and time. Let\u0026rsquo;s break down what\u0026rsquo;s actually going on in the definition of the weak solution. The most notable feature is that if $u$ is a weak solution, it does not have to be differentiable in space or time since the definition only contains derivatives of $\\varphi$!\nSo how do we arrive at this definition? First, we multiply the entire conservation law by $\\varphi$: $$ u_{t}\\varphi + f(u)_{x}\\varphi = 0. $$\nThen, we integrate in time over $[0,\\infty)$ and in space over the entire real line: $$ \\int_{0}^{\\infty}\\int_{-\\infty}^{\\infty} u_{t}\\varphi + f(u)_{x}\\varphi\\;dxdt = 0 $$\nThe last step is to integrate the first term by parts in time and the second term by parts in space: $$ \\begin{align} \\int_{0}^{\\infty} \\int_{-\\infty}^{\\infty} u_{t}\\varphi dxdt \u0026amp;= -\\int_{0}^{\\infty} \\int_{-\\infty}^{\\infty} u\\varphi_{t}dxdt + \\int_{-\\infty}^{\\infty} u(x,0)\\varphi(x,0)dx\\\\\n\\int_{0}^{\\infty} \\int_{-\\infty}^{\\infty} f(u)_{x}\\varphi\\;dxdt \u0026amp;= -\\int_{0}^{\\infty} \\int_{-\\infty}^{\\infty} f(u)\\varphi_{x}\\;dxdt \\end{align} $$\nMost of the boundary terms vanish because $\\varphi$ has compact support: we have $\\varphi(\\pm \\infty,t) = \\varphi(x,\\pm\\infty) = 0$. Note that in integrating by parts, we pass the derivatives from $u$ onto the test function. Altogether, we obtain $$ \\int_{0}^{\\infty}\\int_{-\\infty}^{\\infty} u\\varphi_{t} + f(u)\\varphi_{x}\\;dxdt = -\\int_{-\\infty}^{\\infty} u(x,0)\\varphi(x,0)\\;dx $$\nBut why do we do this? The idea is that rather than consider pointwise values of $u(x,t)$, we consider averaged values of $u(x,t)$ against test functions. If you\u0026rsquo;ve taken a functional analysis course, you can view the integration against a test function as the evaluation of a distribution induced by $u_{t}$ and $f(u)_{x}$. We note that all classical solutions ($C_{x,t}^{1}$ solutions that satisfy the PDE in a pointwise sense) are weak solutions but the converse is certainly not true.\nIt is straightforward to verify that $𝟙_{\\{x\\leqslant t\\}}$ is a weak solution of the linear advection equation with $u(x,0) = 𝟙_{\\{x \\leqslant 0\\}}$. However, the definition $\\eqref{eq:weaksol}$ of quite cumbersome to work with and we would like to develop a more convenient way to verify whether we have a weak solution or not. Notice that $u(x,t) = 𝟙_{\\{x\\leqslant t\\}}$ as well as the solution of Burgers equation in Figure 1 are piecewise smooth and only discontinuous at a single point that may (in the case of linear advection) or may not (in the case of Burgers equation) change with time. In this case, we can say much more about the structure of the weak solution.\nTheorem 1. (Rankine-Hugoniot) Suppose the solution of $\\eqref{eq:conslaw}$ is piecewise smooth and contains a discontinuity along the curve $x(t)$. Then $u$ is a weak solution of $\\eqref{eq:conslaw}$ if and only if $$ \\begin{equation} x\u0026rsquo;(t) = \\frac{f(u^{-}) - f(u^{+})}{u^{-} - u^{+}}, \\label{eq:RH} \\end{equation} $$ where $x\u0026rsquo;(t)$ is the speed of the discontinuity and $u^{\\pm}$ are the values of $u$ along each side of the shock.\nCondition $\\eqref{eq:RH}$ is referred to as the Rankine-Hugoniot jump condition.\nExample 1. Let\u0026rsquo;s return to the linear advection equation and use the jump condition to verify that $𝟙_{\\{x\\leqslant t\\}}$ is a weak solution. We have $x\u0026rsquo;(t) = 1$, $u^{-} = 1$, and $u^{+} = 0$. Then $$ \\frac{f(u^{-}) - f(u^{+})}{u^{-} - u^{+}} = \\frac{u^{-} - u^{+}}{u^{-} - u^{+}} = 1 $$ and the jump condition is satisfied.\nThus, the Rankine-Hugoniot condition is a handy way for us to verify whether something is a weak solution. It turns out that solutions to conservation laws often have the structure required by Theorem 1 \u0026ndash; that is, they are piecewise smooth except along finitely many curves of discontinuity.\nBy relaxing the definition of the solution, we are able to admit much less smooth solutions to $\\eqref{eq:conslaw}$. However, we will see weak solutions need not be unique! Consider Burgers equation with the initial condition $u(x,0) = -𝟙_{\\{x\\leqslant 0\\}} + 𝟙_{\\{x\u0026gt;0\\}}$. It is straightforward to verify that $u(x,t) = -𝟙_{\\{x\\leqslant 0\\}} + 𝟙_{\\{x\u0026gt;0\\}}$ as well as $$ u(x,t) = \\begin{cases} -1 \u0026amp;x \\leqslant -t\\\\\n\\frac{x}{t} \u0026amp;-t \u0026lt; x \\leqslant t\\\\\n1 \u0026amp;x \u0026gt; t \\end{cases} $$ are both weak solutions. The first weak solution does not change at all with time, so our intuition might tell us that this solution does not make much physical sense. But what about the second weak solution? At the very least, we need to establish more stringent criteria for our weak solutions in order to pick out the physically relevant solution.\n1.3 Entropy Solutions of Conservation Laws Consider the slightly modified PDE given by $$ \\begin{equation} \\begin{cases} u^{(\\varepsilon)}_{t} + f(u^{(\\varepsilon)})_{x} = \\varepsilon u^{(\\varepsilon)}_{xx} \u0026amp;\\text{in}\\;\\mathbb{R} \\times (0,\\infty)\\\\\nu^{(\\varepsilon)}(x,0) = u_{0}(x) \u0026amp;\\text{on}\\;\\mathbb{R} \\times \\{t=0\\}. \\label{eq:viscosityPDE} \\end{cases} \\end{equation} $$\nThis PDE is parabolic and it turns out that the solution $u^{(\\varepsilon)}$, if it exists, is smooth and unique.\nDefinition 2. The entropy solution of $\\eqref{eq:conslaw}$ is defined as $$ u(x,t) = \\lim_{\\varepsilon \\to 0} u^{(\\varepsilon)}(x,t). $$ This limit, if it exists, is unique and is a weak solution of $\\eqref{eq:conslaw}$.\nAgain, this definition is quite difficult to work with, even moreso than the original definition of the weak solution, and we need to establish a more efficient way of verifying whether we have the entropy solution or not. There are alternative definitions based on the notions of entropy flux and entropy flux functions, but we\u0026rsquo;ll skip right to the chase here. Thanks to the work of Oleinik and Lax, we have a quick way to identify entropy solutions.\nTheorem 2. (Oleinik Entropy Condition) Suppose the solution of $\\eqref{eq:conslaw}$ is piecewise smooth and contains a discontinuity along the curve $x(t)$. Then $u$ is the entropy solution if and only if $$ \\begin{equation} \\frac{f(u) - f(u^{-})}{u - u^{-}} \\geqslant \\frac{f(u^{+}) - f(u^{-})}{u^{+} - u^{-}} \\geqslant \\frac{f(u^{+}) - f(u)}{u^{+} - u} \\label{eq:oleinik} \\end{equation} $$ for all $u$ between $u^{-}$ and $u^{+}$.\nAgain, $u^{-}$ and $u^{+}$ denote the values of $u$ on each side of the shock $x(t)$. However, we can simplify $\\eqref{eq:oleinik}$ even further if we have a convex conservation law, which is simply the case when $f(u)$ is convex. For Burgers equation, we have $f(u) = u^{2}/2$, which is indeed convex. The Lax Entropy condition tells us the following.\nTheorem 3. (Lax Entropy Condition) Suppose the solution of $\\eqref{eq:conslaw}$ is piecewise smooth and contains a discontinuity along the curve $x(t)$. Suppose also that $f$ is convex. Then $u$ is the entropy solution if and only if $$ \\begin{equation} f\u0026rsquo;(u^{-}) \\geqslant \\frac{f(u^{+}) - f(u^{-})}{u^{+} - u^{-}} \\geqslant f\u0026rsquo;(u^{+}). \\label{eq:lax} \\end{equation} $$ In particular, $\\eqref{eq:lax}$ is equivalent to requiring that $u^{-} \u0026gt; u^{+}$.\nThe Lax Entropy condition tells us that for convex conservation laws, the value of the weak solution on the left side of the shock ($u^{-}$) must be larger than the value of the solution on the right side of the shock ($u^{+}$) in order for the weak solution to be an entropy solution. The physical intuition behind the entropy solution is related to the entropy of a fluid in gas dynamics: in smooth flows, the entropy remains constant along particle paths, and if the particle crosses a shock, the entropy may only jump to a higher value. Entropy is inversely proportional to density, and so the density $u$ can only jump to lower values along a shock.\nWe\u0026rsquo;ve spent a lot of time now developing the main ideas of weak solutions for conservation laws. We can concretely define what it means to have discontinuous solutions of $\\eqref{eq:conslaw}$ and impose conditions to guarantee the uniqueness of this solution. Great. We can finally move on to numerical methods for solving conservation laws. In developing such schemes, our goal will be to ensure that our scheme converges (in some sense) to the entropy solution.\n2. Monotone Schemes First, a cautionary tale in constructing numerical methods for conservation laws. We consider Burgers equation with the initial condition $u(x,0) = 𝟙_{\\{x \\geqslant 0\\}}$ and the following finite difference scheme: $$ u_{j}^{n+1} = u_{j}^{n} - \\frac{\\Delta t}{\\Delta x} u_{j}^{n}(u_{j}^{n} - u_{j-1}^{n}). $$\nInitially, we have $u_{j}^{0} = 𝟙_{\\{x_{j} \\geqslant 0\\}}$. However, this scheme returns $u_{j}^{n} = u_{j}^{0}$ for all $n$ and $j$, so the scheme converges to $u(x,t) = u(x,0)$. But in the preceding sections, we established that this can\u0026rsquo;t even be a weak solution (indeed, the Rankine-Hugoniot condition is not satisfied).\nClearly, we must exercise caution in constructing schemes to solve $\\eqref{eq:conslaw}$. We have just seen that a perfectly reasonable-looking finite difference scheme (at least, at first glance) fails to converge to a weak solution, let alone the correct entropy solution. In other cases, it may be possible that a scheme converges to a weak solution but not an entropy solution. We will circle back to this idea shortly.\n2.1 The Finite Volume Method We begin by introducing the finite volume method, which discretizes the spatial domain into cells (intervals in 1D, rectangles or other polygons in 2D), and computes an approximation to the average of the solution in each cell. The precise formulation is as follows: consider a bounded, open, connected domain $\\Omega = (a,b) \\subset \\mathbb{R}$ and a finite stopping time $T$, and consider the conservation law given by $$ \\begin{equation} \\begin{cases} u_{t} + f(u)_{x} = 0 \u0026amp;\\text{in}\\;\\Omega \\times (0,T)\\\\\nu(x,0) = u_{0}(x) \u0026amp;\\text{on}\\;\\Omega \\times \\{t=0\\}. \\end{cases} \\label{eq:conslaw2} \\end{equation} $$\nWe discretize $\\Omega$ into equally-sized cells $I_{j} = (x_{j-1/ 2}, x_{j+1/ 2})$: $$ a = x_{1/ 2} \u0026lt; x_{3/ 2} \u0026lt; \\dots \u0026lt; x_{N+1/ 2} = b, \\;\\;\\;\\Delta x := x_{j+1/ 2} - x_{j-1/ 2}. $$\nNext, we integrate $\\eqref{eq:conslaw2}$ over each cell $I_{j}$: $$ \\begin{align} \\int_{x_{j-1/ 2}}^{x_{j+1/ 2}} (u_{t} + f(u)_{x})\\;dx \u0026amp;= 0\\notag\\\\\n\\Delta x \\frac{d\\bar{u}_{j}}{dt} + f(u_{j+1/ 2}^{-}) - f(u_{j-1/ 2}^{+}) \u0026amp;= 0\\notag\\\\\n\\frac{d\\bar{u}_{j}}{dt} + \\frac{f(u_{j+1/ 2}) - f(u_{j-1/ 2})}{\\Delta x} \u0026amp;= 0 \\end{align} $$\nHere, $\\bar{u}_{j}$ denotes the cell average of $u$ in cell $I_{j}$: $\\bar{u}_{j} := \\frac{1}{\\Delta x}\\int_{I_{j}} u\\;dx$. If our goal is to solve for the cell averages $\\bar{u}_{j}$, you might notice that the second term poses a problem as it is formulated in terms of pointwise values of $u$ at $x_{j-1/ 2}$ and $x_{j+1/ 2}$ rather than $\\bar{u}_{j}$. In the first finite volume scheme we consider, we will approximate $u$ in $I_{j} = (x_{j-1/ 2}, x_{j+1/ 2})$ by the cell average $\\bar{u}_{j}$ in $I_{j}$.\nThis approximation is not so well defined as the points $x_{j+1/ 2}$, which lie at the intersection between the two cells $I_{j}$ and $I_{j+1}$. The finite volume scheme remedies this by introducing a numerical flux function which takes as inputs cell averages and returns an approximation of the flux function at the cell endpoints $x_{j+1/ 2}$, i.e. $f(u_{j+1/ 2}) \\approx \\hat{f}(\\bar{u}_{j}, \\bar{u}_{j+1})$ and $f(u_{j-1/ 2}) \\approx \\hat{f}(\\bar{u}_{j-1}, \\bar{u}_{j})$: $$ \\begin{equation} \\frac{d\\bar{u}_{j}}{dt} + \\frac{1}{\\Delta x}\\left(\\hat{f}(\\bar{u}_{j}, \\bar{u}_{j+1}) - \\hat{f}(\\bar{u}_{j-1}, \\bar{u}_{j})\\right) = 0. \\label{eq:finitevol} \\end{equation} $$\nThus, $\\hat{f}$ can be viewed in this context as a function which takes in the dual values at the cell interfaces and returns a single, physically relevant value. This will be important when we try to develop higher order finite volume schemes later.\nFor now, the only thing left to do to turn $\\eqref{eq:finitevol}$ into a usable scheme is to discretize the time derivative. The simplest option is to use a first-order finite difference. In doing so, we arrive at the explicit first-order finite volume scheme.\nDefinition 3. The explicit first-order finite volume scheme in space and time is given by $$ \\begin{equation} \\bar{u}_{j}^{n+1} = \\bar{u}_{j}^{n} - \\frac{\\Delta t}{\\Delta x}\\left( \\hat{f}(\\bar{u}_{j}^{n}, \\bar{u}_{j+1}^{n}) - \\hat{f}(\\bar{u}_{j-1}^{n}, \\bar{u}_{j}^{n}) \\right), \\label{eq:finitevol2} \\end{equation} $$ where $\\bar{u}_{j}^{n}$ denotes the cell averages at time $t^{n}$ and $\\bar{u}_{j}^{n+1}$ the cell averages at time $t^{n+1} = t^{n} + \\Delta t$.\nNotice that we haven\u0026rsquo;t specified what, exactly, the flux function $\\hat{f}$ is yet. The choice of $\\hat{f}$ is immensely important as it will determine many properties of our scheme, such as convergence to the entropy solution. Before stating some possible choices of $\\hat{f}$, we will first cover the properties $\\hat{f}$ must satisfy in order to converge to the entropy solution.\nDefinition 4. A monotone scheme is one that can be written in the form $$ \\begin{equation} \\bar{u}_{j}^{n+1} = \\mathcal{H}(\\bar{u}_{j-p}^{n}, \\dots, \\bar{u}_{j+q}^{n}), \\end{equation} $$ where $\\mathcal{H}$ is a nondecreasing function in all arguments. In particular, the monotone scheme on the three-point stencil $\\{\\bar{u}_{j-1}^{n}, \\bar{u}_{j}^{n}, \\bar{u}_{j+1}^{n}\\}$ is given by $\\bar{u}_{j}^{n+1} = \\mathcal{H}(\\bar{u}_{j-1}^{n}, \\bar{u}_{j}^{n}, \\bar{u}_{j+1}^{n})$.\nThis is all well and good, but why should we care about monotone schemes? To begin with, they have a number of remarkable properties that guarantee our numerical solution behaves \u0026ldquo;nicely.\u0026rdquo;\nTheorem 4. Monotone schemes satisfy the following properties:\n Local maximum principle. $$ \\min_{j-p \\leqslant i \\leqslant j+q} \\bar{u}_{i}^{n} \\leqslant \\mathcal{H}(\\bar{u})_{j} \\leqslant \\max_{j-p \\leqslant i \\leqslant j+q} \\bar{u}_{i}^{n} \\;\\;\\;\\forall j. $$\n Total variation diminishing property. $$ ||\\mathcal{H}(\\bar{u})||_{BV} \\leqslant ||\\bar{u}||_{BV}, $$ where the bounded variation seminorm is given by $||u||_{BV} = \\sum_{j} |u_{j} - u_{j-1}|$.\n Entropy solution. Monotone schemes converge to the entropy solution with a rate in $\\ell^{1}$ of half-order. This bound is sharp.\n  Roughly speaking, the local maximum principle tells us that our cell averages at $t^{n+1}$ cannot be larger or smaller than our averages at $t^{n}$ around the stencil $\\{\\bar{u}_{j-p}^{n}, \\dots, \\bar{u}_{j+q}^{n}\\}$. The total variation diminishing property tells us that our cell averages can only decrease in bounded variation. In particular, this means that our cell averages at $t^{n+1}$ cannot be more oscillatory than our cell averages at $t^{n}$. We will see soon some schemes which violate this property and tend to produce spurious oscillations in the numerical solution. The last property is of course self-explanatory: by using a monotone scheme, we are guaranteed to converge to the entropy solution!\nWe would like for the finite volume scheme in $\\eqref{eq:finitevol2}$ to be a monotone scheme, and our goal now is to choose a function $\\hat{f}$ in order to achieve this. We have $$ \\mathcal{H}(\\bar{u}_{j-1}^{n}, \\bar{u}_{j}^{n}, \\bar{u}_{j+1}^{n}) = \\bar{u}_{j}^{n} - \\frac{\\Delta t}{\\Delta x}\\left( \\hat{f}(\\bar{u}_{j}^{n}, \\bar{u}_{j+1}^{n}) - \\hat{f}(\\bar{u}_{j-1}^{n}, \\bar{u}_{j}^{n}) \\right). $$\n$\\mathcal{H}$ must be nondecreasing in each argument, so we compute its partial derivatives: $$ \\begin{align} \\mathcal{H}_{1} \u0026amp;= \\frac{\\Delta t}{\\Delta x} \\hat{f}_{1}(\\bar{u}_{j-1}^{n}, \\bar{u}_{j}^{n})\\label{eq:monotone1}\\\\\n\\mathcal{H}_{2} \u0026amp;= 1 - \\frac{\\Delta t}{\\Delta x} \\left( \\hat{f}_{1}(\\bar{u}_{j}^{n}, \\bar{u}_{j+1}^{n}) - \\hat{f}_{2}(\\bar{u}_{j-1}^{n}, \\bar{u}_{j}^{n}) \\right)\\label{eq:monotone2}\\\\\n\\mathcal{H}_{3} \u0026amp;= -\\frac{\\Delta t}{\\Delta x} \\hat{f}_{2}(\\bar{u}_{j}^{n}, \\bar{u}_{j+1}^{n})\\label{eq:monotone3}. \\end{align} $$\nHere, $\\hat{f}_{1}$ denotes the partial derivative of $\\hat{f}$ with respect to the first argument, and so on. If $\\hat{f}$ is increasing in the first argument and decreasing in the second argument, then $\\eqref{eq:monotone1}$ and $\\eqref{eq:monotone3}$ will be nonnegative. Furthermore, if $$ \\frac{\\Delta t}{\\Delta x} \\left( \\hat{f}_{1}(\\bar{u}_{j}^{n}, \\bar{u}_{j+1}^{n}) - \\hat{f}_{2}(\\bar{u}_{j-1}^{n}, \\bar{u}_{j}^{n}) \\right) \\leqslant 1, $$\nthen $\\eqref{eq:monotone2}$ will also be nonnegative. This last condition is merely a restriction on our time step. By choosing $\\Delta t$ small enough, we can always satisfy this condition. The first two conditions tell us that we merely need to choose our numerical flux function $\\hat{f}$ such that it is increasing in its first argument and decreasing in its second argument.\nProposition 1. If $\\hat{f}$ satifies the following conditions:\n $\\hat{f}$ is Lipschitz continuous in all arguments.\n $\\hat{f}(u,u) = f(u)$. This is known as the consistency condition.\n $\\hat{f}$ is increasing in the first argument and decreasing in the second argument,\n  then the scheme $\\eqref{eq:finitevol2}$ is monotone.\nWe will not discuss the first two conditions here, but suffice it to say that these properties are very easy to check.\n2.1.1 Numerical Flux Functions We will briefly state some common choices of $\\hat{f}$ that satisfy the conditions of Proposition 1 and lead to monotone schemes.\n Lax-Friedrichs flux. $$ \\begin{equation} \\hat{f}(\\bar{u}_{j}, \\bar{u}_{j+1}) = \\frac{1}{2}\\left( f(u_{j}) + f(u_{j+1}) - \\alpha(u_{j+1} - u_{j}) \\right), \\end{equation} $$ where $\\alpha = \\max_{u} |f\u0026rsquo;(u)|$. We can take $\\alpha = \\max_{[\\bar{u}_{j}, \\bar{u}_{j+1}]} |f\u0026rsquo;(u)|$.\n Godunov flux. $$ \\begin{equation} \\hat{f}(\\bar{u}_{j}, \\bar{u}_{j+1}) = \\begin{cases} \\min_{\\bar{u}_{j} \\leqslant u \\leqslant \\bar{u}_{j+1}} f(u), \u0026amp;\\bar{u}_{j} \\leqslant \\bar{u}_{j+1}\\\\\n\\max_{\\bar{u}_{j} \\geqslant u \\geqslant \\bar{u}_{j+1}} f(u), \u0026amp;\\bar{u}_{j} \u0026gt; \\bar{u}_{j+1}. \\end{cases} \\end{equation} $$\n Engquist-Osher flux. $$ \\begin{align} \\hat{f}(\\bar{u}_{j}, \\bar{u}_{j+1}) = \u0026amp;\\int_{0}^{\\bar{u}_{j}} \\max\\{f\u0026rsquo;(u),0\\}\\;du + \\int_{0}^{\\bar{u}_{j+1}} \\min\\{f\u0026rsquo;(u),0\\}\\;du. \\end{align} $$\n  There are two more popular choices of flux that do not lead to monotone schemes but are nevertheless still popular.\n Roe flux. $$ \\begin{equation} \\hat{f}(\\bar{u}_{j}, \\bar{u}_{j+1}) = \\begin{cases} f(\\bar{u}_{j}), \u0026amp;\\frac{f(\\bar{u}_{j+1}) - f(\\bar{u}_{j})}{\\bar{u}_{j+1} - \\bar{u}_{j}} \\geqslant 0\\\\\nf(\\bar{u}_{j+1}), \u0026amp;\\frac{f(\\bar{u}_{j+1}) - f(\\bar{u}_{j})}{\\bar{u}_{j+1} - \\bar{u}_{j}} \u0026lt; 0. \\end{cases} \\end{equation} $$\n Lax-Wendroff flux. $$ \\begin{align} \\hat{f}(\\bar{u}_{j}, \\bar{u}_{j+1}) = \u0026amp;\\frac{1}{2}(f(\\bar{u}_{j}) + f(\\bar{u}_{j+1})) -\\notag\\\\\n\u0026amp;\\frac{\\Delta t}{2\\Delta x}f\u0026rsquo;\\left( \\frac{\\bar{u}_{j} + \\bar{u}_{j+1}}{2}\\right) \\left( f(\\bar{u}_{j+1}) - f(\\bar{u}_{j}) \\right) \\end{align} $$\n  2.2 Implementation Without further ado, we will implement the first-order finite volume method using all five of the aforementioned numerical fluxes for Burgers equation with $u(x,0) = \\sin{x}$. All of the source code is publicly available on GitHub in both a MATLAB and Python implementation. For convenience, we will explain the Python implementation here. First, we initialize the parameters of the scheme.\n# specify domain a = 0 b = 2*np.pi # initial condition: u(x,0) = alpha + beta*sin(x) alpha = 0.0 beta = 1.0 # number of grid points in spatial discretization N = 80 # setup grid points x = np.linspace(a,b,N) dx = (b-a)/(N-1); # stopping time T = 1.5  Next, we compute the cell averages of the initial condition, $\\bar{u}_{j}^{0}$. This is accomplished by integrating the initial condiiton over each cell $I_{j}$:\n# setup array to store cell averages; due to periodicity, we omit the last cell u = np.zeros((len(x)-1,1)); # returns the initial condition of the PDE def initial_condition(z, alpha, beta): return alpha + beta*np.sin(z) # compute cell averages at t=0 for i in range(0,N-1): u[i] = (1.0/dx)*integrate.quad(initial_condition, x[i], x[i+1], args=(alpha,beta))[0]  Next, we must choose an appropriate time step for the scheme. Since we are using an explicit time-stepping scheme, we must choose an appropriately small time step (recall that explicit time-stepping is conditionally stable). For the purposes of example, we choose $$ \\frac{\\Delta t}{\\Delta x} \\max_{u} |f\u0026rsquo;(u)| = \\frac{1}{2}. $$\nThe last step is to perform the time-stepping, whereby for each time step we must compute the numerical fluxes $\\hat{f}(\\bar{u}_{j}^{n}, \\bar{u}_{j+1}^{n})$ and $\\hat{f}(\\bar{u}_{j-1}^{n}, \\bar{u}_{j}^{n})$:\nt = 0.0 while t \u0026lt; T: # alpha for the Lax-Friedrichs flux A = np.amax(np.amax(u)); # compute numerical fluxes fhat_{j+1/2} um = u up = np.roll(u,-1) fR = lf_flux(um, up, A) # compute numerical fluxes fhat_{j-1/2} (assuming periodic BCs) fL = np.roll(fR,1) # first order explicit time-stepping u -= dt/dx*(fR - fL) # increment time step t = t+dt  Each of the numerical fluxes in Section 2.1.1 have been implemented and can be viewed on GitHub. Figure 2 shows the finite volume solutions at $T=1.5$.\n  Figure 2: Solution of Burgers equation with sine initial data using the first-order finite volume method.   The first observation we make is that there is little difference between the Roe, Godunov, and Engquist-Osher fluxes, at least for this example problem. The Godunov and Engquist-Osher fluxes lead to monotone schemes which converge to the entropy solution. The Roe flux does not lead to a monotone scheme, and in very rare cases may provide solutions with the incorrect shock speed. Nevertheless, in most cases the Roe scheme works well and is a popular choice for the numerical flux.\nNext, the Lax-Friedrichs flux is noticeably more dissipative than any of the other results. It is known to \u0026ldquo;smear\u0026rdquo; discontinuities and add numerical diffusion. However, the Lax-Friedrichs flux is a very popular choice for the numerical flux since it leads to a monotone scheme and is straightforward to implement.\nLastly, the Lax-Wendroff flux is\u0026hellip;problematic, to say the least. Notice that the numerical solution develops spurious (nonphysical) oscillations in the vicinity of the shock at $x=\\pi$. If the Lax-Wendroff scheme converges, it converges to a weak solution, but the scheme is not monotone and does not exhibit the total variation-diminishing (TVD) property. Lax-Wendroff is actually a second-order method in disguise, but we\u0026rsquo;ll discuss this much later and how the order of a numerical method is related to the TVD property for conservation laws.\n3. Key Takeaways If I haven\u0026rsquo;t bored you to death by this point, you should have a basic understanding of weak solutions for conservation laws and the mathematical foundations for discontinuous solutions. The study of such solutions is important because they occur frequently in fluid dynamics and other related fields. You should also be able to implement a basic first-order finite volume scheme for a variety of one-dimensional conservation laws.\nWe\u0026rsquo;ve only covered first-order schemes in this post, and you might have already guessed that these methods converge too slowly to be of much use for practical problems. Next time, we\u0026rsquo;ll cover higher order finite volume methods for conservation laws and touch on some of the theory regarding higher-order methods (remember how I said the Lax-Wendroff flux actually yields a second-order method? We\u0026rsquo;ll circle back to that soon). Unfortunately, there\u0026rsquo;s no free lunch and higher order methods come with their own set of issues.\nBelow are two texts by Randy LeVeque which are helpful in fleshing out much of the details of the Theorems given in this post. I\u0026rsquo;ve found them to be immensely helpful in my Ph.D. studies.\nReferences [1] LeVeque, Randall J. Finite volume methods for hyperbolic problems. Vol. 31. Cambridge university press, 2002.\n[2] LeVeque, Randall J. Numerical methods for conservation laws. Vol. 132. Basel: Birkhäuser, 1992.\nCodes NumCL repository on GitHub\n","date":1557878400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1558742400,"objectID":"1702ebbefeb609a44f5eef50238b3660","permalink":"/post/conservation-laws-1/","publishdate":"2019-05-15T00:00:00Z","relpermalink":"/post/conservation-laws-1/","section":"post","summary":"An introduction to solving nonlinear conservation laws.","tags":["Numerical PDE","Conservation Laws","Finite Volume Method"],"title":"Numerical Methods for Conservation Laws (Part 1)","type":"post"},{"authors":[],"categories":[],"content":" Welcome to Slides Academic\nFeatures  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides  Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E  Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = \\;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\nFragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  Two  Three \nA fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears  Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view   Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links   night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links  Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/img/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}  Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }  Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Academic's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":["Justin Dong, Beatrice Riviere"],"categories":null,"content":"","date":1470974400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1470974400,"objectID":"966884cc0d8ac9e31fab966c4534e973","permalink":"/publication/journal-article/","publishdate":"2016-08-12T00:00:00-04:00","relpermalink":"/publication/journal-article/","section":"publication","summary":"In this paper, we present a semi-implicit method for the incompressible three-phase flow equations in two dimensions. In particular, a high-order discontinuous Galerkin spatial discretization is coupled with a backward Euler discretization in time. ","tags":["Source Themes"],"title":"A semi-implicit method for incompressible three-phase flow in porous media","type":"publication"},{"authors":null,"categories":null,"content":"","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"d1311ddf745551c9e117aa4bb7e28516","permalink":"/project/external-project/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/external-project/","section":"project","summary":"An example of linking directly to an external project website using `external_link`.","tags":["Demo"],"title":"External Project","type":"project"},{"authors":null,"categories":null,"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"8f66d660a9a2edc2d08e68cc30f701f7","permalink":"/project/internal-project/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/internal-project/","section":"project","summary":"An example of using the in-built project page.","tags":["Deep Learning"],"title":"Internal Project","type":"project"},{"authors":["Justin Dong"],"categories":null,"content":"","date":1395115200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1395115200,"objectID":"d655a58787160e201681ae1670b11a4e","permalink":"/publication/undergrad-paper/","publishdate":"2014-03-18T00:00:00-04:00","relpermalink":"/publication/undergrad-paper/","section":"publication","summary":"The modeling of three-phase fluid flow has many important applications in reservoir simulation. In this paper, we introduce a high order method for sequentially solving the phase pressure-saturation formulation of three-phase flow.","tags":["Source Themes"],"title":"Three-phase flow simulations in one dimension","type":"publication"}]